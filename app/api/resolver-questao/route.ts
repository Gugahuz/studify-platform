import OpenAI from "openai"

// Fun√ß√£o para redimensionar imagem se necess√°rio
function resizeImageIfNeeded(buffer: Buffer, maxSize: number = 1024 * 1024): Buffer {
  // Se a imagem for menor que 1MB, retorna como est√°
  if (buffer.length <= maxSize) {
    return buffer
  }

  // Para imagens maiores, vamos reduzir a qualidade
  // Isso √© uma simplifica√ß√£o - em produ√ß√£o usar√≠amos uma biblioteca como sharp
  return buffer
}

export async function POST(req: Request) {
  try {
    const formData = await req.formData()
    const file = formData.get("file") as File

    if (!file) {
      return Response.json({ error: "Imagem √© obrigat√≥ria" }, { status: 400 })
    }

    if (!file.type.startsWith("image/")) {
      return Response.json({ error: "Apenas arquivos de imagem s√£o suportados" }, { status: 400 })
    }

    if (file.size > 20 * 1024 * 1024) {
      return Response.json({ error: "Imagem deve ter no m√°ximo 20MB" }, { status: 400 })
    }

    console.log(`[RESOLVER-QUESTAO] Processando: ${file.name} (${file.size} bytes, ${file.type})`)

    // Converter e otimizar imagem
    const bytes = await file.arrayBuffer()
    let buffer = Buffer.from(bytes)
    buffer = resizeImageIfNeeded(buffer)

    const base64Image = buffer.toString("base64")
    const mimeType = file.type

    if (!process.env.OPENAI_API_KEY) {
      console.error("[RESOLVER-QUESTAO] OPENAI_API_KEY n√£o encontrada")
      return Response.json({
        success: true,
        resolucao: generateIntelligentFallback(),
        nomeArquivo: file.name,
        fallback: true,
      })
    }

    const openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY,
    })

    // Tentativa 1: GPT-4o com prompt otimizado
    try {
      console.log("[RESOLVER-QUESTAO] Tentativa 1: GPT-4o")
      const result = await processWithModel(openai, "gpt-4o", base64Image, mimeType, "high")
      if (result) {
        console.log("[RESOLVER-QUESTAO] Sucesso com GPT-4o")
        return Response.json({
          success: true,
          resolucao: result,
          nomeArquivo: file.name,
        })
      }
    } catch (error) {
      console.log("[RESOLVER-QUESTAO] GPT-4o falhou:", error)
    }

    // Tentativa 2: GPT-4o-mini com qualidade m√©dia
    try {
      console.log("[RESOLVER-QUESTAO] Tentativa 2: GPT-4o-mini")
      const result = await processWithModel(openai, "gpt-4o-mini", base64Image, mimeType, "low")
      if (result) {
        console.log("[RESOLVER-QUESTAO] Sucesso com GPT-4o-mini")
        return Response.json({
          success: true,
          resolucao: result,
          nomeArquivo: file.name,
          fallback: true,
        })
      }
    } catch (error) {
      console.log("[RESOLVER-QUESTAO] GPT-4o-mini falhou:", error)
    }

    // Tentativa 3: GPT-4-turbo como √∫ltimo recurso
    try {
      console.log("[RESOLVER-QUESTAO] Tentativa 3: GPT-4-turbo")
      const result = await processWithModel(openai, "gpt-4-turbo", base64Image, mimeType, "low")
      if (result) {
        console.log("[RESOLVER-QUESTAO] Sucesso com GPT-4-turbo")
        return Response.json({
          success: true,
          resolucao: result,
          nomeArquivo: file.name,
          fallback: true,
        })
      }
    } catch (error) {
      console.log("[RESOLVER-QUESTAO] GPT-4-turbo falhou:", error)
    }

    // Se todas as tentativas falharam
    console.log("[RESOLVER-QUESTAO] Todas as tentativas falharam, usando fallback inteligente")
    return Response.json({
      success: true,
      resolucao: generateIntelligentFallback(),
      nomeArquivo: file.name,
      fallback: true,
    })
  } catch (error) {
    console.error("[RESOLVER-QUESTAO] Erro geral:", error)
    return Response.json({
      success: true,
      resolucao: generateIntelligentFallback(),
      nomeArquivo: "imagem",
      fallback: true,
    })
  }
}

async function processWithModel(
  openai: OpenAI,
  model: string,
  base64Image: string,
  mimeType: string,
  detail: "low" | "high",
): Promise<string | null> {
  const prompt = `Voc√™ √© um professor especializado em resolver quest√µes de forma CLARA e DETALHADA. Analise esta imagem e responda adequadamente.

INSTRU√á√ïES CR√çTICAS DE FORMATA√á√ÉO:
- Use APENAS texto simples e limpo
- N√ÉO use s√≠mbolos especiais: \\ [ ] ( ) ** *** \{ \} \$ 
- N√ÉO use formata√ß√£o LaTeX ou markdown
- N√ÉO quebre palavras ou use barras no meio de palavras
- Escreva todas as palavras completas e normais
- Use apenas emojis b√°sicos para organiza√ß√£o
- Para expoentes: use os s√≠mbolos corretos ¬≤ ¬≥ ‚Å¥ ‚Åµ ‚Å∂ ‚Å∑ ‚Å∏ ‚Åπ
- NUNCA use ^ para expoentes, sempre use os s√≠mbolos de sobrescrito
- N√ÉO mencione classifica√ß√µes como "MATEM√ÅTICA" ou "OUTRAS DISCIPLINAS"

IDENTIFIQUE o tipo de conte√∫do e responda no formato adequado:

==== PARA MATEM√ÅTICA/F√çSICA/QU√çMICA (com c√°lculos): ====

üéØ Objetivo: [Descreva claramente o que precisa ser encontrado]

üîç Equa√ß√£o identificada:
[Transcreva usando s√≠mbolos corretos: x¬≤ + 3x - 4 = 0, n√£o x^2 + 3x - 4 = 0]

üìù Resolu√ß√£o passo a passo:

üîπ Passo 1: [Nome do passo]
[Explica√ß√£o simples do que fazer]
[Mostre a opera√ß√£o usando s√≠mbolos corretos para expoentes]

üîπ Passo 2: [Nome do passo]  
[Explica√ß√£o simples do que fazer]
[Continue usando s√≠mbolos corretos: x¬≤, x¬≥, etc.]

‚úÖ Resultado final:
[Destaque a resposta final de forma clara e simples]

==== PARA OUTRAS DISCIPLINAS (hist√≥ria, geografia, biologia, etc.): ====

üë§ Quem foi ou O que √©:
‚Ä¢ [Informa√ß√µes b√°sicas e defini√ß√£o completa]
‚Ä¢ [Dados importantes como datas, locais, etc.]

üìö Principais caracter√≠sticas e feitos:
‚Ä¢ [Detalhes espec√≠ficos]
‚Ä¢ [Fatos importantes]
‚Ä¢ [Contexto hist√≥rico ou cient√≠fico]

üèõÔ∏è [Categoria relevante como Per√≠odo Hist√≥rico]:
‚Ä¢ [Mais detalhes]
‚Ä¢ [Informa√ß√µes complementares]

üåü [Outra categoria relevante]:
‚Ä¢ [Detalhes adicionais]
‚Ä¢ [Informa√ß√µes espec√≠ficas]

üéØ Legado e Import√¢ncia:
‚Ä¢ [Por que √© importante]
‚Ä¢ [Impacto na hist√≥ria, ci√™ncia ou sociedade]
‚Ä¢ [Relev√¢ncia atual]

REGRAS OBRIGAT√ìRIAS:
- Para matem√°tica: use o formato completo com objetivo, equa√ß√£o e passos
- Para outras disciplinas: v√° DIRETO para as se√ß√µes de conte√∫do
- SEMPRE use s√≠mbolos corretos para expoentes: ¬≤ ¬≥ ‚Å¥ ‚Åµ ‚Å∂ ‚Å∑ ‚Å∏ ‚Åπ
- NUNCA use ^ para representar expoentes
- NUNCA mencione a classifica√ß√£o do tipo de disciplina
- Escreva TODAS as palavras completas
- NUNCA use barras no meio de palavras
- Use texto simples e natural`

  try {
    const completion = await openai.chat.completions.create({
      model: model,
      messages: [
        {
          role: "user",
          content: [
            { type: "text", text: prompt },
            {
              type: "image_url",
              image_url: {
                url: `data:${mimeType};base64,${base64Image}`,
                detail: detail,
              },
            },
          ],
        },
      ],
      max_tokens: 4000,
      temperature: 0,
    })

    const response = completion.choices[0].message.content

    if (!response || response.trim().length < 50) {
      throw new Error("Resposta muito curta ou vazia")
    }

    // Limpar qualquer s√≠mbolo de formata√ß√£o que possa ter escapado e corrigir expoentes
    let cleanResponse = response
      .replace(/\\\[/g, "")
      .replace(/\\\]/g, "")
      .replace(/\\\(/g, "")
      .replace(/\\\)/g, "")
      .replace(/\\\{/g, "")
      .replace(/\\\}/g, "")
      .replace(/\\\$/g, "")
      .replace(/\*\*\*/g, "")
      .replace(/\*\*/g, "")
      .replace(/\\frac/g, "")
      .replace(/\\text/g, "")
      .replace(/\\[a-zA-Z]+/g, "")

    // Converter expoentes para s√≠mbolos corretos
    cleanResponse = cleanResponse
      .replace(/\^2/g, "¬≤")
      .replace(/\^3/g, "¬≥")
      .replace(/\^4/g, "‚Å¥")
      .replace(/\^5/g, "‚Åµ")
      .replace(/\^6/g, "‚Å∂")
      .replace(/\^7/g, "‚Å∑")
      .replace(/\^8/g, "‚Å∏")
      .replace(/\^9/g, "‚Åπ")
      .replace(/\^1/g, "¬π")
      .replace(/\^0/g, "‚Å∞")

    return cleanResponse
  } catch (error) {
    console.error(`[RESOLVER-QUESTAO] Erro no modelo ${model}:`, error)
    return null
  }
}

function generateIntelligentFallback(): string {
  return `üéØ Objetivo: Ajudar voc√™ a resolver sua quest√£o

üîç Situa√ß√£o:
Recebi sua imagem, mas encontrei dificuldades t√©cnicas para process√°-la completamente.

üìù Como posso ajudar:

üîπ Op√ß√£o 1: Tente novamente
- Tire uma nova foto com boa ilumina√ß√£o
- Certifique-se de que o texto est√° leg√≠vel
- Evite sombras ou reflexos

üîπ Op√ß√£o 2: Digite sua quest√£o
- Escreva diretamente no chat: "Resolva: 2x + 5 = 15"
- Ou pergunte: "Explique a fotoss√≠ntese"
- Ou: "Quem foi Dom Pedro I?"

üîπ Op√ß√£o 3: Use o chat
- Converse comigo para tirar d√∫vidas espec√≠ficas
- Posso explicar conceitos passo a passo
- Funciono com todas as disciplinas

‚úÖ Disciplinas que domino:
üìö Matem√°tica ‚Ä¢ üß™ Ci√™ncias ‚Ä¢ üìñ Hist√≥ria ‚Ä¢ üåç Geografia ‚Ä¢ üìù Portugu√™s ‚Ä¢ üé® Artes

Estou aqui para ajudar! Tente uma dessas alternativas e vamos resolver juntos! üöÄ`
}
