import OpenAI from "openai"

export async function POST(req: Request) {
  try {
    const formData = await req.formData()
    const file = formData.get("file") as File

    if (!file) {
      return Response.json({ error: "Imagem √© obrigat√≥ria" }, { status: 400 })
    }

    // Verificar se √© uma imagem
    if (!file.type.startsWith("image/")) {
      return Response.json({ error: "Apenas arquivos de imagem s√£o suportados" }, { status: 400 })
    }

    if (file.size > 10 * 1024 * 1024) {
      return Response.json({ error: "Imagem deve ter no m√°ximo 10MB" }, { status: 400 })
    }

    // Check if API key is available
    if (!process.env.OPENAI_API_KEY) {
      console.error("OPENAI_API_KEY n√£o encontrada")
      return Response.json({ error: "Configura√ß√£o da API n√£o encontrada" }, { status: 500 })
    }

    // Converter imagem para base64
    const bytes = await file.arrayBuffer()
    const buffer = Buffer.from(bytes)
    const base64Image = buffer.toString("base64")
    const mimeType = file.type

    const openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY,
    })

    const prompt = `Voc√™ √© um professor de matem√°tica especializado. Analise esta imagem e resolva TODAS as quest√µes matem√°ticas que encontrar.

IMPORTANTE: 
- Identifique e transcreva EXATAMENTE o que est√° escrito na imagem
- Resolva cada quest√£o passo a passo de forma detalhada
- Use formata√ß√£o clara com t√≠tulos e numera√ß√£o
- Se n√£o conseguir ler algo, mencione especificamente

FORMATO OBRIGAT√ìRIO:
## üìù QUEST√ÉO IDENTIFICADA:
[Transcreva exatamente o que est√° escrito]

## üîç AN√ÅLISE:
[Explique o tipo de problema e estrat√©gia]

## ‚úèÔ∏è RESOLU√á√ÉO PASSO A PASSO:
[Desenvolva a solu√ß√£o completa]

## ‚úÖ RESPOSTA FINAL:
[Destaque a resposta]

Se houver m√∫ltiplas quest√µes, repita este formato para cada uma.
Se n√£o conseguir identificar quest√µes matem√°ticas, descreva detalhadamente o que v√™ na imagem.`

    try {
      const completion = await openai.chat.completions.create({
        model: "gpt-4o",
        messages: [
          {
            role: "user",
            content: [
              { type: "text", text: prompt },
              {
                type: "image_url",
                image_url: {
                  url: `data:${mimeType};base64,${base64Image}`,
                  detail: "high",
                },
              },
            ],
          },
        ],
        max_tokens: 3000,
      })

      const resolucao = completion.choices[0].message.content

      return Response.json({
        success: true,
        resolucao: resolucao,
        nomeArquivo: file.name,
      })
    } catch (apiError) {
      console.error("OpenAI API error:", apiError)

      return Response.json(
        {
          error:
            "N√£o foi poss√≠vel processar a imagem no momento. Verifique se a imagem cont√©m quest√µes matem√°ticas leg√≠veis e tente novamente.",
          details: apiError instanceof Error ? apiError.message : "Erro na API de vis√£o",
        },
        { status: 500 },
      )
    }
  } catch (error) {
    console.error("Error processing image:", error)
    return Response.json(
      {
        error: "Erro interno ao processar imagem. Verifique o arquivo e tente novamente.",
        details: error instanceof Error ? error.message : "Erro desconhecido",
      },
      { status: 500 },
    )
  }
}
